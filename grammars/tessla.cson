'scopeName': 'tessla'
'name': 'TeSSLa'
'fileTypes': [
  'tessla'
]
'patterns': [
  {
    'comment': 'In-line comments'
    'match': '\-\-.*'
    'name': 'comment.line.double-dash'
  },
  {
    'comment': 'Strings'
    'match': '"[^"]*"'
    'name': 'punctuation.string'
  },
  {
    'comment': 'Keywords'
    'match': '\\b(if|then|else)\\b'
    'name': 'keyword.control'
  },
  {
    'comment': 'Library functions'
    'match': '\\b(code_line_exec|function_call|function_return)\\b'
    'name': 'support.function'
  },
  {
    'comment': 'Language constants'
    'match': '\\b(true|false)\\b'
    'name': 'constant.language'
  },
  {
    'comment': 'Numeric floating point values'
    'match': '[^a-zA-Z]([+-]?\\d+(?:\\.\\d+)?)'
    'captures':
      1:
        'name': 'constant.numeric'
  },
  {
    'comment': 'Datatypes'
    'match': '\\b(Signal|Events|Int|Float|String|Boolean|Bool|Unit)\\b'
    'name': 'storage.type'
  },
  {
    'comment': 'Assignment operator'
    'match': '\:\='
    'name': 'keyword.operator.assignment'
  },
  {
    'comment': 'Arithmetic operators'
    'match': '\\s*(\\+|-|\\^|\\*|\\/|&|\\|<<|>>)\\s*'
    'name': 'keyword.operator'
  },
  {
    'comment': 'Comparison operator'
    'match': '\\s*(<|>|!=|==|>=|<=|\\|\\||&&)\\s*'
    'name': 'keyword.operator.comparison'
  },
  {
    'comment': 'Comparison operator'
    'match': '\\s*(!|~)\\s*'
    'name': 'keyword.operator.unary'
  },
  {
    'comment': 'Variable names'
    'match': '(def|define)\\s+([\\w\\d\\_\\.]+)\\s*(?=\\:)'
    'captures':
      1:
        'name': 'keyword.other'
      2:
        'name': 'variable.other'
  },
  {
    'comment': 'Function names'
    'begin': '(def|define)\\s+([\\w\\d\\_\\.]+)\\s*(?=\\()'
    'beginCaptures':
      1:
        'name': 'keyword.other'
      2:
        'name': 'entity.name.function'
    'patterns': [
      {
        'comment': 'Function parameters'
        'match': '([\\w\\d\\_]+)\\s*(?=\\,|\\))'
        'captures':
          1:
            'name': 'variable.parameter'
      }
    ]
    'end': '\\)\\s*(\\:\\=)'
    'endCaptures':
      1:
        'name': 'keyword.operator.assignment'
  },
  {
    'comment': 'In-streams'
    'match': '\\b(in)\\s+([\\w\\d\\_\\.]+)'
    'captures':
      1:
        'name': 'keyword.other'
      2:
        'name': 'variable.other'
  },
  {
    'comment': 'Out-streams'
    'match': '\\b(out)\\s+([\\w\\d\\_\\.]+)'
    'captures':
      1:
        'name': 'keyword.other'
      2:
        'name': 'variable.other'
  }
]
